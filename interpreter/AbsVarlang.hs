

module AbsVarlang where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [Stm]
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident
  deriving (Eq, Ord, Show, Read)

data Decl = Decl Type [Ident]
  deriving (Eq, Ord, Show, Read)

data Stm
    = StmDecl Decl
    | StmBlock [Stm]
    | StmAss Ident Exp
    | StmDictAss Ident Exp Exp
    | StmStepExp Exp
    | StmIf Exp Stm
    | StmIfElse Exp Stm Stm
    | StmWhile Exp Stm
    | StmFor Decl Exp [Stm]
    | StmFunDef Ident [Arg] [Stm]
    | RetStm Exp
    | RetVoidStm
    | StmMatch Exp [CaseStm]
    | StmPrint Exp
    | StmPrintS String
  deriving (Eq, Ord, Show, Read)

data CaseStm = CaseStm Ident Ident [Stm]
  deriving (Eq, Ord, Show, Read)

data Type
    = Int
    | Bool
    | Char
    | Void
    | Fun Type [Type]
    | List Type
    | Dict Type Type
    | Var [VarD]
  deriving (Eq, Ord, Show, Read)

data VarD = VarD Ident Type
  deriving (Eq, Ord, Show, Read)

data EDictD = EDictD Exp Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EIncrR Ident
    | EIncr Ident
    | EDecrR Ident
    | EDecr Ident
    | EIncrExp Ident Exp
    | EDecrExp Ident Exp
    | EDivExp Ident Exp
    | EMulrExp Ident Exp
    | EModrExp Ident Exp
    | EVariable Ident
    | EInt Integer
    | EChar Char
    | EValTrue
    | EValFalse
    | EList [Exp]
    | EVar Ident Exp
    | EFun [Arg] [Stm]
    | EFunCall Ident [Exp]
    | EDict [EDictD]
    | EDictGet Ident Exp
    | EVarIs Exp Ident
    | ENeg Exp
    | ENot Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ELTH Exp Exp
    | ELE Exp Exp
    | EGTH Exp Exp
    | EGE Exp Exp
    | EEQU Exp Exp
    | ENE Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
  deriving (Eq, Ord, Show, Read)

