-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParVarlang where
import AbsVarlang
import LexVarlang
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '%=' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '*=' { PT _ (TS _ 9) }
  '+' { PT _ (TS _ 10) }
  '++' { PT _ (TS _ 11) }
  '+=' { PT _ (TS _ 12) }
  ',' { PT _ (TS _ 13) }
  '-' { PT _ (TS _ 14) }
  '--' { PT _ (TS _ 15) }
  '-=' { PT _ (TS _ 16) }
  '/' { PT _ (TS _ 17) }
  '/=' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  ';' { PT _ (TS _ 20) }
  '<' { PT _ (TS _ 21) }
  '<=' { PT _ (TS _ 22) }
  '=' { PT _ (TS _ 23) }
  '==' { PT _ (TS _ 24) }
  '=>' { PT _ (TS _ 25) }
  '>' { PT _ (TS _ 26) }
  '>=' { PT _ (TS _ 27) }
  '@' { PT _ (TS _ 28) }
  '[' { PT _ (TS _ 29) }
  ']' { PT _ (TS _ 30) }
  'bool' { PT _ (TS _ 31) }
  'char' { PT _ (TS _ 32) }
  'dict' { PT _ (TS _ 33) }
  'else' { PT _ (TS _ 34) }
  'false' { PT _ (TS _ 35) }
  'for' { PT _ (TS _ 36) }
  'function' { PT _ (TS _ 37) }
  'if' { PT _ (TS _ 38) }
  'in' { PT _ (TS _ 39) }
  'int' { PT _ (TS _ 40) }
  'is' { PT _ (TS _ 41) }
  'list' { PT _ (TS _ 42) }
  'match' { PT _ (TS _ 43) }
  'print' { PT _ (TS _ 44) }
  'return' { PT _ (TS _ 45) }
  'true' { PT _ (TS _ 46) }
  'var' { PT _ (TS _ 47) }
  'void' { PT _ (TS _ 48) }
  'while' { PT _ (TS _ 49) }
  '{' { PT _ (TS _ 50) }
  '||' { PT _ (TS _ 51) }
  '}' { PT _ (TS _ 52) }

L_ident  { PT _ (TV $$) }
L_quoted { PT _ (TL $$) }
L_integ  { PT _ (TI $$) }
L_charac { PT _ (TC $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
String  :: { String }  : L_quoted {  $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }

Program :: { Program }
Program : ListStm { AbsVarlang.Program $1 }
Arg :: { Arg }
Arg : Type Ident { AbsVarlang.Arg $1 $2 }
Decl :: { Decl }
Decl : Type ListIdent { AbsVarlang.Decl $1 $2 }
Stm :: { Stm }
Stm : Decl { AbsVarlang.StmDecl $1 }
    | '{' ListStm '}' { AbsVarlang.StmBlock $2 }
    | Ident '=' Exp { AbsVarlang.StmAss $1 $3 }
    | Ident '[' Exp ']' '=' Exp { AbsVarlang.StmDictAss $1 $3 $6 }
    | Exp { AbsVarlang.StmStepExp $1 }
    | 'if' '(' Exp ')' Stm { AbsVarlang.StmIf $3 $5 }
    | 'if' '(' Exp ')' Stm 'else' Stm { AbsVarlang.StmIfElse $3 $5 $7 }
    | 'while' '(' Exp ')' Stm { AbsVarlang.StmWhile $3 $5 }
    | 'for' '(' Decl 'in' Exp ')' '{' ListStm '}' { AbsVarlang.StmFor $3 $5 $8 }
    | 'function' Ident '(' ListArg ')' '{' ListStm '}' { AbsVarlang.StmFunDef $2 $4 $7 }
    | 'return' Exp { AbsVarlang.RetStm $2 }
    | 'return' { AbsVarlang.RetVoidStm }
    | 'match' '(' Exp ')' '{' ListCaseStm '}' { AbsVarlang.StmMatch $3 (reverse $6) }
    | 'print' '(' Exp ')' { AbsVarlang.StmPrint $3 }
    | 'print' '(' String ')' { AbsVarlang.StmPrintS $3 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] }
          | Ident { (:[]) $1 }
          | Ident ',' ListIdent { (:) $1 $3 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] }
        | Stm { (:[]) $1 }
        | Stm ';' ListStm { (:) $1 $3 }
Exp7 :: { Exp }
Exp7 : Ident '++' { AbsVarlang.EIncrR $1 }
     | '++' Ident { AbsVarlang.EIncr $2 }
     | Ident '--' { AbsVarlang.EDecrR $1 }
     | '--' Ident { AbsVarlang.EDecr $2 }
     | Ident '+=' Exp { AbsVarlang.EIncrExp $1 $3 }
     | Ident '-=' Exp { AbsVarlang.EDecrExp $1 $3 }
     | Ident '/=' Exp { AbsVarlang.EDivExp $1 $3 }
     | Ident '*=' Exp { AbsVarlang.EMulrExp $1 $3 }
     | Ident '%=' Exp { AbsVarlang.EModrExp $1 $3 }
     | Ident { AbsVarlang.EVariable $1 }
     | Integer { AbsVarlang.EInt $1 }
     | Char { AbsVarlang.EChar $1 }
     | 'true' { AbsVarlang.EValTrue }
     | 'false' { AbsVarlang.EValFalse }
     | '[' ListExp ']' { AbsVarlang.EList $2 }
     | 'var' '(' '@' Ident ',' Exp ')' { AbsVarlang.EVar $4 $6 }
     | 'function' '(' ListArg ')' '{' ListStm '}' { AbsVarlang.EFun $3 $6 }
     | Ident '(' ListExp ')' { AbsVarlang.EFunCall $1 $3 }
     | '{' ListEDictD '}' { AbsVarlang.EDict $2 }
     | Ident '[' Exp ']' { AbsVarlang.EDictGet $1 $3 }
     | 'is' '(' Exp ',' '@' Ident ')' { AbsVarlang.EVarIs $3 $6 }
     | '(' Exp ')' { $2 }
CaseStm :: { CaseStm }
CaseStm : ':' Ident '(' Ident ')' '{' ListStm '}' { AbsVarlang.CaseStm $2 $4 $7 }
ListCaseStm :: { [CaseStm] }
ListCaseStm : {- empty -} { [] }
            | ListCaseStm CaseStm { flip (:) $1 $2 }
Type :: { Type }
Type : 'int' { AbsVarlang.Int }
     | 'bool' { AbsVarlang.Bool }
     | 'char' { AbsVarlang.Char }
     | 'void' { AbsVarlang.Void }
     | Type '(' ListType ')' { AbsVarlang.Fun $1 $3 }
     | 'list' '(' Type ')' { AbsVarlang.List $3 }
     | 'dict' '(' Type ',' Type ')' { AbsVarlang.Dict $3 $5 }
     | 'var' '(' ListVarD ')' { AbsVarlang.Var $3 }
VarD :: { VarD }
VarD : Ident '=>' Type { AbsVarlang.VarD $1 $3 }
ListType :: { [Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
ListVarD :: { [VarD] }
ListVarD : {- empty -} { [] }
         | VarD { (:[]) $1 }
         | VarD ',' ListVarD { (:) $1 $3 }
EDictD :: { EDictD }
EDictD : Exp ':' Exp { AbsVarlang.EDictD $1 $3 }
ListEDictD :: { [EDictD] }
ListEDictD : {- empty -} { [] }
           | EDictD { (:[]) $1 }
           | EDictD ',' ListEDictD { (:) $1 $3 }
Exp6 :: { Exp }
Exp6 : '-' Exp7 { AbsVarlang.ENeg $2 }
     | '!' Exp7 { AbsVarlang.ENot $2 }
     | Exp7 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '*' Exp6 { AbsVarlang.EMul $1 $3 }
     | Exp5 '/' Exp6 { AbsVarlang.EDiv $1 $3 }
     | Exp5 '%' Exp6 { AbsVarlang.EMod $1 $3 }
     | Exp6 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '+' Exp5 { AbsVarlang.EAdd $1 $3 }
     | Exp4 '-' Exp5 { AbsVarlang.ESub $1 $3 }
     | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '<' Exp4 { AbsVarlang.ELTH $1 $3 }
     | Exp3 '<=' Exp4 { AbsVarlang.ELE $1 $3 }
     | Exp3 '>' Exp4 { AbsVarlang.EGTH $1 $3 }
     | Exp3 '>=' Exp4 { AbsVarlang.EGE $1 $3 }
     | Exp3 '==' Exp4 { AbsVarlang.EEQU $1 $3 }
     | Exp3 '!=' Exp4 { AbsVarlang.ENE $1 $3 }
     | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '&&' Exp2 { AbsVarlang.EAnd $1 $3 } | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 '||' Exp1 { AbsVarlang.EOr $1 $3 } | Exp2 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

