{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintVarlang where

-- pretty-printer generated by the BNF converter

import AbsVarlang
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])


instance Print Program where
  prt i e = case e of
    Program stms -> prPrec i 0 (concatD [prt 0 stms])

instance Print Arg where
  prt i e = case e of
    Arg type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Decl where
  prt i e = case e of
    Decl type_ ids -> prPrec i 0 (concatD [prt 0 type_, prt 0 ids])

instance Print Stm where
  prt i e = case e of
    StmDecl decl -> prPrec i 0 (concatD [prt 0 decl])
    StmBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])
    StmAss id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])
    StmDictAss id exp1 exp2 -> prPrec i 0 (concatD [prt 0 id, doc (showString "["), prt 0 exp1, doc (showString "]"), doc (showString "="), prt 0 exp2])
    StmStepExp exp -> prPrec i 0 (concatD [prt 0 exp])
    StmIf exp stm -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    StmIfElse exp stm1 stm2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm1, doc (showString "else"), prt 0 stm2])
    StmWhile exp stm -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stm])
    StmFor decl exp stms -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 decl, doc (showString "in"), prt 0 exp, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    StmFunDef id args stms -> prPrec i 0 (concatD [doc (showString "function"), prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    RetStm exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp])
    RetVoidStm -> prPrec i 0 (concatD [doc (showString "return")])
    StmMatch exp casestms -> prPrec i 0 (concatD [doc (showString "match"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString "{"), prt 0 casestms, doc (showString "}")])
    StmPrint exp -> prPrec i 0 (concatD [doc (showString "print"), doc (showString "("), prt 0 exp, doc (showString ")")])
    StmPrintS str -> prPrec i 0 (concatD [doc (showString "print"), doc (showString "("), prt 0 str, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print CaseStm where
  prt i e = case e of
    CaseStm id1 id2 stms -> prPrec i 0 (concatD [doc (showString ":"), prt 0 id1, doc (showString "("), prt 0 id2, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Type where
  prt i e = case e of
    Int -> prPrec i 0 (concatD [doc (showString "int")])
    Bool -> prPrec i 0 (concatD [doc (showString "bool")])
    Char -> prPrec i 0 (concatD [doc (showString "char")])
    Void -> prPrec i 0 (concatD [doc (showString "void")])
    Fun type_ types -> prPrec i 0 (concatD [prt 0 type_, doc (showString "("), prt 0 types, doc (showString ")")])
    List type_ -> prPrec i 0 (concatD [doc (showString "list"), doc (showString "("), prt 0 type_, doc (showString ")")])
    Dict type_1 type_2 -> prPrec i 0 (concatD [doc (showString "dict"), doc (showString "("), prt 0 type_1, doc (showString ","), prt 0 type_2, doc (showString ")")])
    Var vards -> prPrec i 0 (concatD [doc (showString "var"), doc (showString "("), prt 0 vards, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print VarD where
  prt i e = case e of
    VarD id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString "=>"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print EDictD where
  prt i e = case e of
    EDictD exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString ":"), prt 0 exp2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Exp where
  prt i e = case e of
    EIncrR id -> prPrec i 7 (concatD [prt 0 id, doc (showString "++")])
    EIncr id -> prPrec i 7 (concatD [doc (showString "++"), prt 0 id])
    EDecrR id -> prPrec i 7 (concatD [prt 0 id, doc (showString "--")])
    EDecr id -> prPrec i 7 (concatD [doc (showString "--"), prt 0 id])
    EIncrExp id exp -> prPrec i 7 (concatD [prt 0 id, doc (showString "+="), prt 0 exp])
    EDecrExp id exp -> prPrec i 7 (concatD [prt 0 id, doc (showString "-="), prt 0 exp])
    EDivExp id exp -> prPrec i 7 (concatD [prt 0 id, doc (showString "/="), prt 0 exp])
    EMulrExp id exp -> prPrec i 7 (concatD [prt 0 id, doc (showString "*="), prt 0 exp])
    EModrExp id exp -> prPrec i 7 (concatD [prt 0 id, doc (showString "%="), prt 0 exp])
    EVariable id -> prPrec i 7 (concatD [prt 0 id])
    EInt n -> prPrec i 7 (concatD [prt 0 n])
    EChar c -> prPrec i 7 (concatD [prt 0 c])
    EValTrue -> prPrec i 7 (concatD [doc (showString "true")])
    EValFalse -> prPrec i 7 (concatD [doc (showString "false")])
    EList exps -> prPrec i 7 (concatD [doc (showString "["), prt 0 exps, doc (showString "]")])
    EVar id exp -> prPrec i 7 (concatD [doc (showString "var"), doc (showString "("), doc (showString "@"), prt 0 id, doc (showString ","), prt 0 exp, doc (showString ")")])
    EFun args stms -> prPrec i 7 (concatD [doc (showString "function"), doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
    EFunCall id exps -> prPrec i 7 (concatD [prt 0 id, doc (showString "("), prt 0 exps, doc (showString ")")])
    EDict edictds -> prPrec i 7 (concatD [doc (showString "{"), prt 0 edictds, doc (showString "}")])
    EDictGet id exp -> prPrec i 7 (concatD [prt 0 id, doc (showString "["), prt 0 exp, doc (showString "]")])
    EVarIs exp id -> prPrec i 7 (concatD [doc (showString "is"), doc (showString "("), prt 0 exp, doc (showString ","), doc (showString "@"), prt 0 id, doc (showString ")")])
    ENeg exp -> prPrec i 6 (concatD [doc (showString "-"), prt 7 exp])
    ENot exp -> prPrec i 6 (concatD [doc (showString "!"), prt 7 exp])
    EMul exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "*"), prt 6 exp2])
    EDiv exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "/"), prt 6 exp2])
    EMod exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "%"), prt 6 exp2])
    EAdd exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "+"), prt 5 exp2])
    ESub exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "-"), prt 5 exp2])
    ELTH exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "<"), prt 4 exp2])
    ELE exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "<="), prt 4 exp2])
    EGTH exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString ">"), prt 4 exp2])
    EGE exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString ">="), prt 4 exp2])
    EEQU exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "=="), prt 4 exp2])
    ENE exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "!="), prt 4 exp2])
    EAnd exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "&&"), prt 2 exp2])
    EOr exp1 exp2 -> prPrec i 1 (concatD [prt 2 exp1, doc (showString "||"), prt 1 exp2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

