function assert(bool cond) {
	if (cond) {
		print("OK!\n");
	} else {
		print("ASSERTION FAILED :(\n");
	}
};

// Simple functions tests

function sum(int a, int b) {
	return a + b;
};
assert(sum(12, 18) == 30);
assert(sum(10, 5) == 15);


function incr(int a) {
	return ++a;
};
assert(incr(10) == 11);
assert(incr(20) == 21);

// Complex functions tests
int globalCounter;
globalCounter = 0;
int(int) repeat;
repeat = function(int times) {
	while (times > 0) {
		times--;
		globalCounter++;
	};
	return 0;
};
int result;
result = repeat(10);
assert(result == 0);
assert(globalCounter == 10);

// complex test with function objects (js -like)
function mult(int x, int y) {
	return x * y;
};

int(int, int) plus;
plus = function(int x, int y) {
	return x + y;
};

function change(int(int, int) f, int z, int q) {
	return f(z, q);
};

assert(change(mult, 4, 5) == 20);
assert(change(plus, 4, 5) == 9);

int rectangleLength;
function testRectangleLength(int a, int b) {
	return (a + b) * 2;
};
rectangleLength = testRectangleLength(3, 4);
assert(rectangleLength == 14);

// Multiple returns
function testBar() {
	return 1;
	return 2;
	return 3;
};
assert(testBar() == 1);

function testFoo(int x) {
	if (x > 10) {
		return 123;
	} else {
		return 0;
	}
};

assert(testFoo(11) == 123);
assert(testFoo(1) == 0);

int globalCounter2;
globalCounter2 = 0;
function rec(int x) {
	if (x > 1) {
			globalCounter2++;
			return rec(x - 1);
	} else {
		return 3;
	}
};
assert(rec(4) == 3);
assert(globalCounter2 == 3);