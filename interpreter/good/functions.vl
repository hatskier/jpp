// TEST FUNCTIONS

// Simple functions tests

function intPrinting(int a) {
	print(a);
	print("\n");
};

print("It should print 1000: ");
intPrinting(1000);



function increment(int a) {
	return ++a;
};
print("It should print 1001: ");
print(increment(1000));
print("\n");

// Complex functions tests
int(int, char) repeat;
repeat = function(int times, char c) {
	while (times > 0) {
		print(c);
		times--;
	};
	return 0;
};

print("It should print: xxxxx: ");
repeat(5, 'x');
print("\n");

// complex test with function objects (js -like)
function mult(int x, int y) {
	return x * y;
};

int(int, int) plus;
plus = function(int x, int y) {
	return x + y;
};

function change(int(int, int) f, int z, int q) {
	return f(z, q);
};

print("It should print 20: ");
print(change(mult, 4, 5));
print("\n");

print("It should print 9: ");
print(change(plus, 4, 5));
print("\n");


int rectangleLength;
function testRectangleLength(int a, int b) {
	return (a + b) * 2;
};
rectangleLength = testRectangleLength(3, 4);
print("It should print 14: ");
print(rectangleLength);
print("\n");

// Multiple returns
function testBar() {
	return 1;
	return 2;
	return 3;
};
print("It should print 1: ");
print(testBar());
print("\n");

// Returns in blocksm

function testFoo(int x) {
	if (x > 10) {
		return 123;
	} else {
		return 0;
	}
};

print("It should print 123: ");
print(testFoo(11));
print("\n");
print("It should print 0: ");
print(testFoo(1));
print("\n");

print("Recursion test\n");
function rec(int x) {
	if (x > 1) {
			print(".");
			return rec(x - 1);
	} else {
		return 3;
	}
};
print("It should print ...3: ");
print(rec(4));